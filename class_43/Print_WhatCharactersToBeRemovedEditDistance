public class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();

        int[][] dp = new int[n + 1][m + 1];
        char[][] op = new char[n + 1][m + 1];

        // Initialize base cases
        for (int i = 0; i <= n; i++) {
            dp[i][0] = i;
            if (i > 0) op[i][0] = 'D'; // Delete
        }
        for (int j = 0; j <= m; j++) {
            dp[0][j] = j;
            if (j > 0) op[0][j] = 'I'; // Insert
        }

        // Fill the dp and op arrays
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                    op[i][j] = 'M'; // Match
                } else {
                    if (dp[i - 1][j] + 1 < dp[i][j - 1] + 1) {
                        if (dp[i - 1][j] + 1 < dp[i - 1][j - 1] + 1) {
                            dp[i][j] = dp[i - 1][j] + 1;
                            op[i][j] = 'D'; // Delete
                        } else {
                            dp[i][j] = dp[i - 1][j - 1] + 1;
                            op[i][j] = 'R'; // Replace
                        }
                    } else {
                        if (dp[i][j - 1] + 1 < dp[i - 1][j - 1] + 1) {
                            dp[i][j] = dp[i][j - 1] + 1;
                            op[i][j] = 'I'; // Insert
                        } else {
                            dp[i][j] = dp[i - 1][j - 1] + 1;
                            op[i][j] = 'R'; // Replace
                        }
                    }
                }
            }
        }

        // Print the operations
        printOperations(op, word1, word2);

        return dp[n][m];
    }

    private void printOperations(char[][] op, String word1, String word2) {
        int i = op.length - 1;
        int j = op[0].length - 1;
        StringBuilder result = new StringBuilder();
        
        while (i > 0 || j > 0) {
            if (op[i][j] == 'M') {
                i--;
                j--;
            } else if (op[i][j] == 'D') {
                result.append("Delete ").append(word1.charAt(i - 1)).append(" from position ").append(i - 1).append("\n");
                i--;
            } else if (op[i][j] == 'I') {
                result.append("Insert ").append(word2.charAt(j - 1)).append(" at position ").append(i).append("\n");
                j--;
            } else if (op[i][j] == 'R') {
                result.append("Replace ").append(word1.charAt(i - 1)).append(" with ").append(word2.charAt(j - 1)).append(" at position ").append(i - 1).append("\n");
                i--;
                j--;
            }
        }
        
        System.out.println(result.toString());
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println("Minimum operations: " + sol.minDistance("horse", "ros"));
    }
}


// Output: 
Delete e from position 4
Delete r from position 2
Replace h with r at position 0

Minimum operations: 3

